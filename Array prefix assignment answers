1. Equilibrium Index Element : https://www.interviewbit.com/problems/balance-array/
public class Solution {
    public int solve(ArrayList<Integer> A) {
        int left_odd = 0;
    int left_even = 0;
    int right_odd = 0;
    int right_even = 0;
    for(int i = 0; i < A.size(); ++i)
    {
        if( i % 2 == 0)
        {
            right_even += A.get(i);
        }
        else
        {
            right_odd += A.get(i);
        }
    }
    int count = 0;
    for(int i = 0; i < A.size(); ++i)
    {
        if(i % 2 == 0)
        {
            right_even -= A.get(i);
            if(left_odd + right_even == left_even + right_odd)
            {
                ++count;
            }
            left_even += A.get(i);
        }
        else
        {
            right_odd -= A.get(i);
            if(left_odd + right_even == left_even + right_odd)
            {
                ++count;
            }
            left_odd += A.get(i);
        }
    }
    return count;
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.. Pick from both sides!:    https://www.interviewbit.com/problems/pick-from-both-sides/
public class Solution {
    public int solve(ArrayList<Integer> A, int B) {
        int n=A.size();
        int leftsum=0;
        
        for(int i=0;i<B;i++){
            leftsum+=A.get(i);
        }
        int max = leftsum;
        int leftpointer = B-1;
        int rightpointer=n-1;
        
        while(leftpointer>=0){
            leftsum-=A.get(leftpointer);
            leftsum+=A.get(rightpointer);
           leftpointer--;
            rightpointer--;
            max=Math.max(leftsum,max);
        }
        return max;
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.Minimum Operations to Make Array Equal
Input: n = 3
Output: 2
Explanation: arr = [1, 3, 5]
First operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]
In the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3].

class Solution {
    public int minOperations(int n) {
        int ans=0;
        for(int i=0;i<n/2;i++){
            int x=(2 * i) + 1;
            ans+=n-x;
        }
        return ans;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. Range Sum Query - Immutable : https://leetcode.com/problems/range-sum-query-immutable/'

class NumArray {
int prefix[];
    public NumArray(int[] nums) {
      prefix=new int[nums.length];
      prefix[0]=nums[0];
      for(int i=1;i<nums.length;i++){
          prefix[i]=prefix[i-1]+nums[i];
      }  
    }
    
    public int sumRange(int left, int right) {
         if(left == 0) return prefix[right];
        return prefix[right]-prefix[left-1];
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5.Equilibrium Point :  
https://practice.geeksforgeeks.org/problems/
equilibrium-point-1587115620/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article

if (n == 1)
            return (1);
        long prefix[]=new long[n];
        long suffix[]=new long[n];
        
        for(int i=0;i<n;i++){
            if(i!=0){
                prefix[i]=prefix[i-1]+arr[i];
            }else{
                prefix[i]=arr[i];
            }
        }
        for(int i=n-1;i>0;i--){
            if(i<=n-2){
                suffix[i]=suffix[i+1]+arr[i];
            }else{
                suffix[i]=arr[i];
            }
        }
        for (int i = 0; i < n; i++) {
            if (prefix[i] == suffix[i]) {
                return i+1;
            }           
    }
    return -1;
    }
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6.Product of Array Except Self : 
class Solution {
    public int[] productExceptSelf(int[] arr) {
        int n = arr.length;

        int res[]=new int[n];
        int leftProd[]=new int[n];
        leftProd[0]=1;
        for(int i=1;i<n;i++){
        leftProd[i]=leftProd[i-1]*arr[i-1];
        }
        int rightProd[]=new int[n];
        rightProd[n-1]=1;
        for(int i=n-2;i>=0;i--){
        rightProd[i]=rightProd[i+1]*arr[i+1];
        }

        for(int i=0;i<n;i++){
        res[i]=leftProd[i]*rightProd[i];
        }
        return res;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
